# This is the PebblePower ESPHome code base and is structured such that common elements 
# are remain consistant and device specific content uses sequenced !includes to get
# the target code for the device being deployed.

# Please manage the commented lines below based on the device and or modules
# you are building ESPHome for:



substitutions:
  # These are items you should set which are unique to the device being deployed
  device_name: pebblepower8
  friendly_name: PebblePower8
  mac: 496a44

  # Whilst you can alter these to manage what and when metics are updated, its not
  # "recommended" to change anything here as these settings have been optimised for 
  # default use cases and other config throughout this code.
  current_delta: "0.01"
  power_delta: "0.1"
  voltage_delta: "0.1"
  debounce_time: "50ms"
  delta_accel_x: '0.1'
  delta_accel_y: '0.1'
  delta_accel_z: '0.1'
  delta_gyro_x: '0.5'
  delta_gyro_y: '0.5'
  delta_gyro_z: '0.5'

  icon: "mdi:switch"

globals:
  - id: ax_offset
    type: float
    initial_value: '0.0'
  - id: ay_offset
    type: float
    initial_value: '0.0'
  - id: az_offset
    type: float
    initial_value: '0.0'
  - id: gx_offset
    type: float
    initial_value: '0.0'
  - id: gy_offset
    type: float
    initial_value: '0.0'
  - id: gz_offset
    type: float
    initial_value: '0.0'
  - id: logging_level
    type: int
    initial_value: '3'  # Default to INFO (3)

script:
  # This script is used to calibrate the MPU6050 sensor. Its intended use is that when
  # the device have been installed in a fixed location in the vehicle or machine and 
  # the user is happy with the X and Y level then the user can press the FUNC button
  # twice, or click the "Calibrate" button in the Web UI to set the baseline level. 
  # The metrics will then provide degrees as a delta from the user baseline and the 
  # baseline is stored in non-volitile RAM so its persisted between reboots.
  - id: calibrate_mpu6050
    mode: queued
    then:
      - logger.log: "Starting calibration..."
      - lambda: |-
          // Perform a calibration routine with stability checks
          float ax_sum = 0.0;
          float ay_sum = 0.0;
          float az_sum = 0.0;
          float gx_sum = 0.0;
          float gy_sum = 0.0;
          float gz_sum = 0.0;
          const int samples = 200;
          ESP_LOGD("calibration", "Collecting %d samples for calibration...", samples);

          for (int i = 0; i < samples; i++) {
            // Collect raw sensor readings
            ax_sum += id(accel_x).state;
            ay_sum += id(accel_y).state;
            az_sum += id(accel_z).state;
            gx_sum += id(gyro_x).state;
            gy_sum += id(gyro_y).state;
            gz_sum += id(gyro_z).state;

            delay(10);
          }

          // Calculate offsets to set the stationary readings to zero
          id(ax_offset) = -ax_sum / samples;
          id(ay_offset) = -ay_sum / samples;
          id(az_offset) = -az_sum / samples;
          id(gx_offset) = -gx_sum / samples;
          id(gy_offset) = -gy_sum / samples;
          id(gz_offset) = -gz_sum / samples;

          ESP_LOGD("calibration", "Calibration complete. Offsets set:");
          ESP_LOGD("calibration", "ax_offset: %f, ay_offset: %f, az_offset: %f", id(ax_offset), id(ay_offset), id(az_offset));
          ESP_LOGD("calibration", "gx_offset: %f, gy_offset: %f, gz_offset: %f", id(gx_offset), id(gy_offset), id(gz_offset));

      - logger.log: "Calibration process completed."
      - lambda: |-
          id(template_sensor_2).publish_state(false);
      - logger.log: "Function 2 sensor reset to OFF after calibration."

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  project:
    name: "PebbleTek.PebblePower8"
    version: "1.0.0"

  on_boot:
    priority: -100
    then:
      - light.turn_on:
          id: led_array
          brightness: 25%
          effect: "Relay Channel and WiFi Status Effect"
      - lambda: |-
          if (id(ax_offset) == 0.0 && id(ay_offset) == 0.0 && id(az_offset) == 0.0 &&
              id(gx_offset) == 0.0 && id(gy_offset) == 0.0 && id(gz_offset) == 0.0) {
            ESP_LOGD("calibration", "Performing initial calibration...");
            id(calibrate_mpu6050).execute();
          }

esp32:
  board: "esp32-c6-devkitc-1"
  variant: "ESP32C6"
  flash_size: 4MB
  framework:
    platform_version: 6.6.0
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y
      CONFIG_OPENTHREAD_ENABLED: n
      CONFIG_ENABLE_WIFI_STATION: y
      CONFIG_USE_MINIMAL_MDNS: y1

    type: esp-idf
    version: 5.2.1

logger:
  level: DEBUG
  logs:
    # Reduce the noise from the MPU6050 sensor
    mpu6050: INFO

light:
  # The LED's on the board are individually programmable and this code monitors for the 
  # states of relays and connectivity and updates the LED's accordingly.
  # The LEDs are treated as an array of 9 LEDs and the "it[*]" field is the address of the 
  # individual LED. 
  - platform: esp32_rmt_led_strip
    pin: 4
    num_leds: 9
    rmt_channel: 0
    chipset: ws2812
    name: "PebblePower LED Array"
    rgb_order: GRB
    id: led_array
    effects:
      - addressable_lambda:
          name: "Relay Channel and WiFi Status Effect"
          update_interval: 50ms
          lambda: |-
            if (id(CH1_relay).state) { it[0] = esphome::Color(0, 255, 0); } else { it[0] = esphome::Color(0, 0, 0); }
            if (id(CH2_relay).state) { it[1] = esphome::Color(0, 255, 0); } else { it[1] = esphome::Color(0, 0, 0); }
            if (id(CH3_relay).state) { it[2] = esphome::Color(0, 255, 0); } else { it[2] = esphome::Color(0, 0, 0); }
            if (id(CH4_relay).state) { it[3] = esphome::Color(0, 255, 0); } else { it[3] = esphome::Color(0, 0, 0); }
            if (id(CH5_relay).state) { it[4] = esphome::Color(0, 255, 0); } else { it[4] = esphome::Color(0, 0, 0); }
            if (id(CH6_relay).state) { it[5] = esphome::Color(0, 255, 0); } else { it[5] = esphome::Color(0, 0, 0); }
            if (id(CH7_relay).state) { it[6] = esphome::Color(0, 255, 0); } else { it[6] = esphome::Color(0, 0, 0); }
            if (id(CH8_relay).state) { it[7] = esphome::Color(0, 255, 0); } else { it[7] = esphome::Color(0, 0, 0); }
            if (id(wifi_component).is_connected()) { it[8] = esphome::Color(0, 0, 255); } else { it[8] = esphome::Color(255, 0, 0); }

# If not being used with Home Assistant, the API section should be commented out
# else the board will reboot every 15 mins trying to connect to Home Assistant
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  id: wifi_component
  ap:
    ssid: ${device_name}
    password: "12345678"

mqtt:
  broker: "splunk"
  topic_prefix: ${device_name}_${mac}

captive_portal:

web_server:
  port: 80
  version: 2

time:
  - platform: homeassistant
    id: homeassistant_time

i2c:
  - id: i2c_internal
    sda: 2
    scl: 3
    scan: true
  - id: i2c_external
    sda: 6
    scl: 7
    scan: true

mcp23017:
  - id: 'mcp23017_hub'
    i2c_id: i2c_internal
    address: 0x20

button:
  - platform: template
    name: "Calibrate MPU6050"
    id: calibrate_button
    on_press:
      - logger.log: "Manual Calibration Triggered via Web UI"
      - script.execute: calibrate_mpu6050


switch:

  - platform: gpio
    setup_priority: 600
    pin:
      number: 22
      mode: 
        output: true
      inverted: false
    id: CH1_relay
    name: ${friendly_name} Relay CH1
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON
  
  - platform: gpio
    setup_priority: 600
    pin:
      number: 23
      mode: 
        output: true
      inverted: false
    id: CH2_relay
    name: ${friendly_name} Relay CH2
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON
  - platform: gpio
    setup_priority: 600
    pin:
      number: 15
      mode: 
        output: true
      inverted: false
    id: CH3_relay
    name: ${friendly_name} Relay CH3
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON
  - platform: gpio
    setup_priority: 600
    pin:
      number: 1
      mode: 
        output: true
      inverted: false
    id: CH4_relay
    name: ${friendly_name} Relay CH4
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON
  - platform: gpio
    setup_priority: 600
    pin:
      mcp23xxx: mcp23017_hub
      number: 0
      mode: 
        output: true
      inverted: false
    id: CH5_relay
    name: ${friendly_name} Relay CH5
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON
  - platform: gpio
    setup_priority: 600
    pin:
      mcp23xxx: mcp23017_hub
      number: 1
      mode: 
        output: true
      inverted: false
    id: CH6_relay
    name: ${friendly_name} Relay CH6
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON
  - platform: gpio
    setup_priority: 600
    pin:
      mcp23xxx: mcp23017_hub
      number: 2
      mode: 
        output: true
      inverted: false
    id: CH7_relay
    name: ${friendly_name} Relay CH7
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON
  - platform: gpio
    setup_priority: 600
    pin:
      mcp23xxx: mcp23017_hub
      number: 3
      mode: 
        output: true
      inverted: false
    id: CH8_relay
    name: ${friendly_name} Relay CH8
    icon: "mdi:electric-switch"
    restore_mode: RESTORE_DEFAULT_ON

binary_sensor:
  - platform: gpio
    pin:
      number: 8
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Relay Button CH1
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH1_relay
  - platform: gpio
    pin:
      number: 10
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Relay Button CH2
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH2_relay
  - platform: gpio
    pin:
      number: 13
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Relay Button CH3
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH3_relay
  - platform: gpio
    pin:
      number: 0
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Relay Button CH4
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH4_relay
  - platform: gpio
    pin:
      mcp23xxx: mcp23017_hub
      number: 8
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Relay Button CH5
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH5_relay
  - platform: gpio
    pin:
      mcp23xxx: mcp23017_hub
      number: 9
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Relay Button CH6
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH6_relay
  - platform: gpio
    pin:
      mcp23xxx: mcp23017_hub
      number: 10
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Relay Button CH7
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH7_relay
  - platform: gpio
    pin:
      mcp23xxx: mcp23017_hub
      number: 11
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Relay Button CH8
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH8_relay
  
  # External Buttons for all 8 channels using GPIO emulation from MCP23017
  - platform: gpio
    pin:
      number: 18
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Ext Relay Button CH1
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH1_relay

  - platform: gpio
    pin:
      number: 19
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Ext Relay Button CH2
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH2_relay

  - platform: gpio
    pin:
      number: 20
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Ext Relay Button CH3
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH3_relay

  - platform: gpio
    pin:
      number: 21
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Ext Relay Button CH4
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH4_relay
  
  - platform: gpio
    pin:
      mcp23xxx: mcp23017_hub
      number: 12
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Ext Relay Button CH5
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH5_relay

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_hub
      number: 13
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Ext Relay Button CH6
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH6_relay

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_hub
      number: 14
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Ext Relay Button CH7
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH7_relay

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_hub
      number: 15
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_name} Ext Relay Button CH8
    filters:
      - delayed_on: ${debounce_time}
      - delayed_off: ${debounce_time}
    on_press:
      - switch.toggle: CH8_relay

# Function Button (FUNC) with double press to trigger calibration

  - platform: gpio
    pin:
      number: 5
      mode:
        input: true
        pullup: true
      inverted: true
    name: "${friendly_name} Function Button"
    id: func_button
    filters:
      - delayed_on_off: 80ms # Debounce filter to eliminate random false switching
    on_multi_click:
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single Click Detected"
          - lambda: |-
              id(template_sensor_1).publish_state(!id(template_sensor_1).state);

      - timing:
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at least 0.5s
        then:
          - logger.log: "Double Click Detected - Starting Calibration"
          - lambda: |-
              id(template_sensor_2).publish_state(true);
              id(calibrate_mpu6050).execute();

      - timing:
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at least 0.2s
        then:
          - logger.log: "Triple Click Detected"
          - lambda: |-
              id(template_sensor_3).publish_state(!id(template_sensor_3).state);

  - platform: template
    name: "Function 1 ${friendly_name}"
    id: template_sensor_1
  - platform: template
    name: "Function 2 ${friendly_name}"
    id: template_sensor_2
  - platform: template
    name: "Function 3 ${friendly_name}"
    id: template_sensor_3

sensor:
  - platform: ina3221
    i2c_id: i2c_internal
    address: 0x40
    update_interval: 1s
    channel_1:
      shunt_resistance: 0.005 ohm
      current:
        name: ${friendly_name} CH1 Current
        id: current1
        filters:
          - delta: ${current_delta}
      power:
        name: ${friendly_name} CH1 Power
        id: power1
        filters:
          - delta: ${power_delta}
      bus_voltage:
        name: ${friendly_name} CH1 Bus Voltage
        id: voltage1
        filters:
          - delta: ${voltage_delta}
    channel_2:
      shunt_resistance: 0.005 ohm
      current:
        name: ${friendly_name} CH2 Current
        id: current2
        filters:
          - delta: ${current_delta}
      power:
        name: ${friendly_name} CH2 Power
        id: power2
        filters:
          - delta: ${power_delta}
      bus_voltage:
        name: ${friendly_name} CH2 Bus Voltage
        id: voltage2
        filters:
          - delta: ${voltage_delta}
    channel_3:
      shunt_resistance: 0.005 ohm
      current:
        name: ${friendly_name} CH3 Current
        id: current3
        filters:
          - delta: ${current_delta}
      power:
        name: ${friendly_name} CH3 Power
        id: power3
        filters:
          - delta: ${power_delta}
      bus_voltage:
        name: ${friendly_name} CH3 Bus Voltage
        id: voltage3
        filters:
          - delta: ${voltage_delta}
  - platform: ina3221
    i2c_id: i2c_internal
    address: 0x41
    update_interval: 1s
    channel_1:
      shunt_resistance: 0.005 ohm
      current:
        name: ${friendly_name} CH4 Current
        id: current4
        filters:
          - delta: ${current_delta}
      power:
        name: ${friendly_name} CH4 Power
        id: power4
        filters:
          - delta: ${power_delta}
      bus_voltage:
        name: ${friendly_name} CH4 Bus Voltage
        id: voltage4
        filters:
          - delta: ${voltage_delta}
    channel_2:
      shunt_resistance: 0.005 ohm
      current:
        name: ${friendly_name} CH5 Current
        id: current5
        filters:
          - delta: ${current_delta}
      power:
        name: ${friendly_name} CH5 Power
        id: power5
        filters:
          - delta: ${power_delta}
      bus_voltage:
        name: ${friendly_name} CH5 Bus Voltage
        id: voltage5
        filters:
          - delta: ${voltage_delta}
    channel_3:
      shunt_resistance: 0.005 ohm
      current:
        name: ${friendly_name} CH6 Current
        id: current6
        filters:
          - delta: ${current_delta}
      power:
        name: ${friendly_name} CH6 Power
        id: power6
        filters:
          - delta: ${power_delta}
      bus_voltage:
        name: ${friendly_name} CH6 Bus Voltage
        id: voltage6
        filters:
          - delta: ${voltage_delta}
  - platform: ina3221
    i2c_id: i2c_internal
    address: 0x42
    update_interval: 1s
    channel_1:
      shunt_resistance: 0.005 ohm
      current:
        name: ${friendly_name} CH7 Current
        id: current7
        filters:
          - delta: ${current_delta}
      power:
        name: ${friendly_name} CH7 Power
        id: power7
        filters:
          - delta: ${power_delta}
      bus_voltage:
        name: ${friendly_name} CH7 Bus Voltage
        id: voltage7
        filters:
          - delta: ${voltage_delta}
    channel_2:
      shunt_resistance: 0.005 ohm
      current:
        name: ${friendly_name} CH8 Current
        id: current8
        filters:
          - delta: ${current_delta}
      power:
        name: ${friendly_name} CH8 Power
        id: power8
        filters:
          - delta: ${power_delta}
      bus_voltage:
        name: ${friendly_name} CH8 Bus Voltage
        id: voltage8
        filters:
          - delta: ${voltage_delta}
    channel_3:
      shunt_resistance: 0.075 ohm
      current:
        name: ${friendly_name} Board Current
        id: current9
        filters:
          - delta: ${current_delta}
      power:
        name: ${friendly_name} Board Power
        id: power9
        filters:
          - delta: ${power_delta}
      bus_voltage:
        name: ${friendly_name} Board Bus Voltage
        id: voltage9
        filters:
          - delta: ${voltage_delta}

  - platform: mpu6050
    i2c_id: i2c_internal
    address: 0x68
    update_interval: 1s
    accel_x:
      name: "MPU6050 Accel X"
      id: accel_x
      filters:
        - lambda: return x + id(ax_offset);
        - sliding_window_moving_average:
            window_size: 10
            send_every: 1
        - delta: ${delta_accel_x}
    accel_y:
      name: "MPU6050 Accel Y"
      id: accel_y
      filters:
        - lambda: return x + id(ay_offset);
        - sliding_window_moving_average:
            window_size: 10
            send_every: 1
        - delta: ${delta_accel_y}
    accel_z:
      name: "MPU6050 Accel Z"
      id: accel_z
      filters:
        - lambda: return x + id(az_offset);
        - sliding_window_moving_average:
            window_size: 10
            send_every: 1
        - delta: ${delta_accel_z}
    gyro_x:
      name: "MPU6050 Gyro X"
      id: gyro_x
      filters:
        - lambda: return x + id(gx_offset);
        - sliding_window_moving_average:
            window_size: 10
            send_every: 1
        - delta: ${delta_gyro_x}
    gyro_y:
      name: "MPU6050 Gyro Y"
      id: gyro_y
      filters:
        - lambda: return x + id(gy_offset);
        - sliding_window_moving_average:
            window_size: 10
            send_every: 1
        - delta: ${delta_gyro_y}
    gyro_z:
      name: "MPU6050 Gyro Z"
      id: gyro_z
      filters:
        - lambda: return x + id(gz_offset);
        - sliding_window_moving_average:
            window_size: 10
            send_every: 1
        - delta: ${delta_gyro_z}